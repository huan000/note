<?php
/**
 * Created by PhpStorm.
 * User: huan
 * Date: 2017/6/29
 * Time: 20:28
 */


/**
 *  每个用户都有uid  和  gid
 *  root 用户的uid 和gid  都是0
 *
 *  uid是0的用户就是root  设置普通的用户uid 为0  则变为root用户
 *
 *  普通用户：
 *    通常只能操作自己家目录里的文件 ，或者浏览相关目录 (/etc/,/var/log), 但是无法创建和删除
 *
 *  su -root     角色切换
 *  sudo ls      授权访问 ， 有一定权限，  但是自己还是自己
 *
 *  虚拟用户
 *   与真实普通用户区分开，这类用户最大的特点就是安装系统后默认就会存在，且默认情况下大多数
 *   不能登陆系统。
 *
 *  创建用户涉及的文件
 *   /etc/passwd ，/etc/shadow  ，/etc/group ，/etc/gshadow
 *
 *  /etc/passwd
 *   root      :x        :0         :0        :root       :/root       :/bin/bash
 *   账号名     账号密码   uid       gid       用户说明     用户家目录     shell 解释器
 *
 * /etc/shadow
 *   账号名称      账号密码(加密后)     最近更改密码的时间        禁止修改密码的天数
 *   用户必须更改口令的天数          警告更改密码的期限       不活动的时间       失效时间     标志
 *
 * /etc/ggroup
 *   用户组名      用户组密码          gid          用户组成员
 *
 *  /etc/gshadow
 *   用户组名      用户组密码         用户组管理账号         用户组成员
 *
 *  id   查看当前用户和组
 *  ls -l --time-style=long-iso /oldboy          格式化时间
 *
 *  modify 修改时间      一般是修改文件内容
 *  change 改变时间      文件的属性改变
 *  access 访问时间      访问文件内容
 *
 *  shell 命名行下面的正则表达式：
 *    *           代表任意 0 到 多个字符
 *    ？          代表任意一个字符
 *    ；          连续不同命令的分割符号
 *    ''          单引号 所见即所得  当作字符串使用
 *    ""          双引号   可以解析变量
 *    "``"        双引号家分引号   可以解析命令
 *    "$()"       替代上面   相同
 *    ``          直接解析命令
 *    {1，2，3}    内容序列
 *    {1..3}       内容连续
 *    &&           并且
 *    ！            否
 *    ||          或者
 *
 *
 *    第158课  正则表达式：
 *    ^            以什么开头
 *    &            以什么结尾
 *    ^g           空行
 *    grep -n  "^&" oldboy.txt         查看空行是哪一行
 *    grep -o  "^&" oldboy.txt         只显示匹配出来的行
 *    .            代表且只能代表任意一个字符
 *    *            重复0个或者多个前面的一个字符。例子 ：0* 匹配  没有0   一个0   0000
 *    .*           匹配所有
 *    [abc]        匹配字符集内的任何一个字符
 *    [^abc]       不匹配字符集内的任何一个字符
 *    a\{n,m\}     重复a n到m次  如果用egrep/sed -r  grep -E 可以去掉斜线
 *    a\{n,\}     重复a  至少n次  如果用egrep/sed -r grep -E 可以去掉斜线
 *    a\{n,m\}     重复a 重复n次  如果用egrep/sed -r grep -E 可以去掉斜线
 *    a\{，m\}     重复a 最多m次  但是000000 会按照三次三次的方式匹配  如果用egrep/sed -r  可以去掉斜线
 *
 *    扩展的正则表达式  要用 grep -E  ， egrep
 *    +            表示重复一个或者一个以上前面的字符
 *    ?            表示重复 0个或者一个 前面的字符
 *    |            表示同时过滤多个字符串
 *    ()           分组过滤，后向引用
 *
 *    后向引用
 *    当在前面匹配部分用小括号的时候，第一个括号内容，可以在后面部分用\1输出
 *
 *
 *
 *    元字符
 *    \b           匹配单词边界           \bcool\b   匹配cool   不配陪 coolle
 *    \B           匹配非单词边界         \Bcool\B   匹配coole   不匹配 cool
 *    \d           匹配数字               b\db       匹配b2b     不匹配 bcb
 *    \D           匹配非数字字符         b\Db       匹配bcb     不匹配 b2b
 *    \w           匹配数字字母和下划线
 *    \W           匹配非数字字母和下划线
 *    \n           匹配换行
 *    \s           匹配单个空白字符
 *    \S           匹配单个非空白字符
 *    \r           匹配回车
 *    \t           匹配横向制表符号
 *    \v           匹配垂直制表符号
 *    \f           匹配换页符号
 *
 *   ********************  165 -166 不会
 *    cat -c1-10            截取字符串  2-10
 *    tr
 *    tree -d               显示目录
 *    tree -L 1             只显示一级
 *
 *    167课：
 *    echo -n '123'; echo '234';             -n 参数在一行显示
 *    echo -e '123\t';                       -e 参数可以使用转义字符
 *
 *    168  ************   date 命令不会
 *    date -s "2016/02/02 10:30"             设置日期
 *    date +%y-%m-%d                         格式化日期  09-11-12
 *    date +%Y-%m-%d                         格式化日期  2009-11-12
 *
 *    169  ******** /etc/bashrc和/etc/profile傻傻分不清楚
 *    $PATH                                  环境变量(当我们输入一个可执行命令的时候，只有这个命令的路径在这个环境变量中才可以找到)
 *    格式：  以冒号分割，从左到右路径来查找
 *    export PATH="$PATH:/root"                     在末尾添加一个路径
 *    which 命令                             显示这个命令的路径
 *
 *
 *    /etc/profile -- /etc/bashrc  -- ~.bash_profile -- .bashrc
 *    /etc/profile 这个文件是全局的，当用户登录时该文件执行一次。  需要加载或者重启
 *    /etc/bashrc  这个文件是全局的，当用户打开一个shell的时候都会执行这个文件，不需要重启
 *    .bash_profile  这个文件是用户的，当用户登录shell时执行一次。需要加载或者重启
 *    .bashrc        这个文件是用户的, 当用户每回登陆shell的时候都会加载，不需要重启
 *    经测试/etc/profile 的优先级高于 /etc/bashrc
 *
 *
 *
 *
 *
 *    grep -v "^&" file                      去除掉一个文件的空行
 *
 *    /var/log/message          系统的日志文件
 *    /var/log/secure           系统安全日志文件
 *    /var/spool/clientmqueque  邮件的临时队列
 *    /proc/interrupts          系统的中断队列
 *    /etc/fstab                开机后硬盘分区自动加载
 *    /etc/profile              系统的环境变量
 *
 *    which                     查找命令路径
 *    whereis                   查找一个命令在哪
 *    locate                    从数据库中查找命令
 *    find                      遍历文件查找  效率极低
 *
 *
 *
 *    关机：
 *    shutdown -h +1            一分钟之后关机
 *    init 0                    关机
 *    halt                      立即停止系统 需要人工关闭电源 (生产常用)
 *    poweroff                  立即停止系统，并且关闭电源
 *
 *    重启
 *    reboot                    重启
 *    shutdown -r now           立即重启
 *    shutdown -r +1            一分钟后重启
 *    init 6                    重启
 *
 *    注销
 *    logout
 *
 *    171课：
 *    sed 命令专题讲座    *********
 *    增
 *    sed '2a new'            追加到指定行后
 *    sed '2i new'            插入到指定行之前
 *    sed '2a new \           多行追加
 *    new1 '
 *
 *    删除
 *    sed '2d'                删除一行
 *
 *    替换
 *    sed '2c'                替换正行
 *    sed 's#0#1#'             单行文本替换 （只会把第一个0 替换成1  第二个0不会变）
 *    sed 's#0#1#g'             单行文本替换 (如果后面有0还会替换  因为有g)
 *    sed 's#HHH#-&-#g'        &代表想要替换的内容
 *
 *    查看
 *    sed -n "p"              p是打印  n是取消默认输出
 *
 *
 *    对指定指定范围的详细讲解：
 *    10                      对第10行进行操作
 *    10,20　　　　　　　　　　对第10行到第二十行进行操作
 *    10，+20                 对第10行到第30行进行操作
 *    1~2                     对第1，3，5，7，9 行进行操作
 *    10，&                   对第10行到最后一行进行操作
 *    /oldboy/                对匹配oldboy的行进行操作
 *    /oldboy/，/leo/         从包含oldboy的行一直到包含leo的行都进行操作
 *
 *    sed '/feixue/,2d'       ***   把含有feixue到第二行删掉  如果第五行有feixue ，因为已经找不到第二行，则第五行会删除
 *    ps: 可以和数字行自由组合
 *
 *
 *
 *    df -h   效果等于 echo "df -h" |bash      bash 命令可以把命令解析
 *
 *    175课：
 *    readlink file.soft                       查看一个软链接文件的源文件
 *
 *    rename 修改文件名 相比于mv   rename 可以同时修改多个文件名
 *    rename "old" "new" *
 *
 *    basename /root/test.txt .txt       显示test   后面会把.txt后缀切割
 *    dirname /root/test.txt             显示/root
 *
 *    md5sum   text.txt
 *    md5sum   text.txt > md5.log        填写校验文件
 *    md5 -c  text。txt                  检验变化
 *
 *    184课：
 *    chmod u+x  file   (只有root用户和文件的属主用户可以改变)
 *    chmod -R 777 file   (所有目录和子目录生效)
 *    chmod ugo 777      ==     chmod a 777
 *
 *    权限详解：(文件权限)
 *    1. 可读r: 表示具有读取\阅读文件内容的权限
 *    2. 可写w: 表示具有新增，修改文件内容的权限
 *       如果没有r配合，那么vi编辑器会提示无法编(可强制编辑),echo 可以重定向或者追加
 *    3. 可执行x:  可以把脚本当作程序执行
 *       3.1普通用户需要同时具备r权限才能执行x权限
 *       3.2root用户只需要x就可以执行
 *
 *    4. 删除文件: (修改文件名等) 的权限是受父目录的权限控制，和文件背身权限无关。
 *       linux中的文件名，是存在与父目录的block里面，并指向这个文件的inode节点，这个文件的
 *       inode节点在标记指向存放这个文件的block数据块。我们删除一个文件，实际上并不删除
 *       inode节点和block数据块。 而是在这个文件的父目录中删除这个文件的名字和inode的对应关系
 *       使这个文件名消失，并无法指向这个文件的inode节点，当没有文件名和程序指向这个文件的
 *       inode节点的时候，系统会释放inode和block，更新inodemap和blockmap，让这些位置可以
 *       存放其他数据。
 *
 *       ps: 想要删除一个文件要上一级目录有w权限
 *
 *     目录权限：
 *     1. 可读r: 可以读取目录下面的文件
 *        1.1 如果没有x权限配合，则不能进入到目录里面，不可以cd
 *        1.2 如果没有x权限，ls列表时可以看到文件名，但是会提示无法访问目录下面的文件
 *        1.3 如果ls -l的时候所有属性会显示问号，只能看到文件名
 *
 *     2. 可写w: 表示具有增加，修改文件名，或者删除文件的权限，
 *        2.1 需要x权限的配合才可以进入目录进行操作
 *
 *     3. 可执行： 表示具有进入目录的权限
 *        3.1 如果没有r权限， 无法列表文件或者目录，没有w无法新建或者删除
 *
 *     ps:
 *     对于文件来说比较安全的权限是644     对于目录来说比较安全的权限是755
 *
 *
 *     umask 控制默认权限 ：
 *     umask  查看默认权限控制，
 *     文件的umask默认控制
 *     666
 *     022             结果如果有基数则加一
 *
 *     目录的umask默认控制
 *     777
 *     022
 *
 *     永久修改umask值
 *     sed -n '51,55p' /etc/profile       修改umask值
 *
 *     suid权限位
 *     suid          s(x) S  4   用户对应的权限位
 *     sgid          s(x) S  2   用户组对应的权限位
 *     sticky        t(x) T  1   其他用户对应的权限位置
 *
 *
 *
 *     suid是针对命令和二进制程序的
 *      1. 用户或属主对应的前三位权限的x位上如果有s就代表有suid权限。
 *         当x位上没有小写x执行的时候，suid的权限显示的就是S
 *      2. suid的作用是可以让普通用户或者其他用户可以以root的角色运行只有
 *         root账号才能运行的程序或者命令，或程序本身对应本来没有权限操作的文件等。
 *      3. 问题： 希望oldboy用户能够删除本来无权删除的文件
 *         1，sudo 给oldboy用户授权rm。 2。给rm命令设置suid   3.设置上级目录的w权限
 *      4. 修改的是命令而不是要执行操作的文件
 *
 *
 *      sgid:
 *      与suid不同的是还可以针对目录和文件设置。
 *      如果针对的是文件
 *      1. sgid 只对二进制命令文件生效
 *      2. 二进制命令需要x可执行权限
 *      3. 执行命令的任何用户可以获得该命令执行期间所属组的权限
 *
 *      ps: 如果给一个目录设置了sgid ， 则进入目录后会组身份会变成sgid的组身份
 *
 *      sticky 粘滞位
 *      只能在目录上设置粘滞位，对文件设置无效。设置了之后只有目录的所有者和root用户
 *      才可以删除或者移动该文件。
 *
 *
 *      chown  user：group      修改用户的属主或者属组
 *
 *
 *
 *      chattr   lsattr
 *      这两个命令是用来查看和改变文件、目录属性的，与chmod这个命令相比，chmod只是改变文件的读写、执行权限，更底层的属性控制是由chattr来改变的。

        chattr命令的用法：chattr [ -RVf ] [ -v version ] [ mode ] files…
        最关键的是在[mode]部分，[mode]部分是由+-=和[ASacDdIijsTtu]这些字符组合的，这部分是用来控制文件的
        属性。

        + ：在原有参数设定基础上，追加参数。
        - ：在原有参数设定基础上，移除参数。
        = ：更新为指定参数设定。
        A：文件或目录的 atime (access time)不可被修改(modified), 可以有效预防例如手提电脑磁盘I/O错误的发生。
        S：硬盘I/O同步选项，功能类似sync。
        a：即append，设定该参数后，只能向文件中添加数据，而不能删除，多用于服务器日志文件安全，只有root才能设定这个属性。
        c：即compresse，设定文件是否经压缩后再存储。读取时需要经过自动解压操作。
        d：即no dump，设定文件不能成为dump程序的备份目标。
        i：设定文件不能被删除、改名、设定链接关系，同时不能写入或新增内容。i参数对于文件 系统的安全设置有很大帮助。
        j：即journal，设定此参数使得当通过mount参数：data=ordered 或者 data=writeback 挂 载的文件系统，文件在写入时会先被记录(在journal中)。如果filesystem被设定参数为 data=journal，则该参数自动失效。
        s：保密性地删除文件或目录，即硬盘空间被全部收回。
        u：与s相反，当设定为u时，数据内容其实还存在磁盘中，可以用于undeletion。
        各参数选项中常用到的是a和i。a选项强制只可添加不可删除，多用于日志系统的安全设定。而i是更为严格的安全设定，只有superuser (root) 或具有CAP_LINUX_IMMUTABLE处理能力（标识）的进程能够施加该选项。

        应用举例：

        1、用chattr命令防止系统中某个关键文件被修改：
        # chattr +i /etc/resolv.conf

        然后用mv /etc/resolv.conf等命令操作于该文件，都是得到Operation not permitted 的结果。vim编辑该文件时会提示W10: Warning: Changing a readonly file错误。要想修改此文件就要把i属性去掉： chattr -i /etc/resolv.conf

        # lsattr /etc/resolv.conf
        会显示如下属性
        ----i-------- /etc/resolv.conf

        2、让某个文件只能往里面追加数据，但不能删除，适用于各种日志文件：
        # chattr +a /var/log/messages
 *
 *
 *      ************acl 权限
 *
 *
 *
 */